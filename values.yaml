global:
  namespace: slotgame-test
  ecr: 235494821046.dkr.ecr.ap-southeast-1.amazonaws.com
  secret:
    token: 0be80d296d77f5aa39217b0a6223da086d46bc80a70facf0766ef9438eaf1759
  env: dev

microservices:
  - name: aggregation
    replicas: 1
    annotations: []
    imageTag: 3f32dc23e637a67577deccea4bc55e7700bdf38a
    limits:
      cpu: 200m
      memory: 100Mi
    requests:
      cpu: 200m
      memory: 100Mi
    readinessProbe: {}
    livenessProbe: {}
    services:
      # default values (type: ClusterIP, protocol: TCP, targetPort = Port)
      - name: pprof
        port: 6060
      - name: grpc
        port: 18020
    ingress:
      enabled: false
  - name: cronJob
    replicas: 1
    annotations: []
    imageTag: v0.0.0
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 500m
      memory: 500Mi
    ingress:
      enabled: false
  - name: game-admin
    replicas: 1
    annotations: []
    imageTag: 6ad226b3d026fc5880c609ce1cc48bf65233743a
    limits:
      cpu: 200m
      memory: 100Mi
    requests:
      cpu: 200m
      memory: 100Mi
    readinessProbe: {}
    livenessProbe: {}
    services:
      # default values (type: ClusterIP, protocol: TCP, targetPort = Port)
      - name: tcp
        port: 80
    ingress:
      enabled: false
  - name: gateway
    replicas: 1
    annotations: []
    imageTag: 7de3ab973c27e8f9e4c55f684194960616bd1123
    limits:
      cpu: 200m
      memory: 100Mi
    requests:
      cpu: 200m
      memory: 100Mi
    readinessProbe: {}
    livenessProbe: {}
    services:
      # default values (type: ClusterIP, protocol: TCP, targetPort = Port)
      - name: pprof
        port: 6060
      - name: grpc
        port: 8845
    ingress:
      enabled: false
  - name: judan
    replicas: 1
    annotations: []
    imageTag: 6b7265acfe69777d7f047e927eb904d6494e7ebc
    limits:
      cpu: 200m
      memory: 100Mi
    requests:
      cpu: 200m
      memory: 100Mi
    readinessProbe: {}
    livenessProbe: {}
    services:
      # default values (type: ClusterIP, protocol: TCP, targetPort = Port)
      - name: pprof
        port: 6060
      - name: grpc
        port: 8090
    ingress:
      enabled: false
  - name: restGateway
    replicas: 1
    annotations: []
    imageTag: bc3b62c4d81c58c6a41495b2a1c12c110c8fc3d4
    limits:
      cpu: 200m
      memory: 100Mi
    requests:
      cpu: 200m
      memory: 100Mi
    readinessProbe: {}
    livenessProbe: {}
    services:
      # default values (type: ClusterIP, protocol: TCP, targetPort = Port)
      - name: grpc
        port: 8080
    ingress:
      enabled: true
      annotations:
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/target-type: ip
        alb.ingress.kubernetes.io/backend-protocol: HTTP
      port: 8080
  - name: rtpManager
    replicas: 1
    annotations: []
    imageTag: f30f1efe52b70f465cb037cad3e86f6a201df432
    limits:
      cpu: 2
      memory: 200Mi
    requests:
      cpu: 2
      memory: 200Mi
    readinessProbe: {}
    livenessProbe: {}
    services:
      # default values (type: ClusterIP, protocol: TCP, targetPort = Port)
      - name: grpc
        port: 9000
    ingress:
      enabled: false
  - name: slot
    replicas: 1
    annotations: []
    imageTag: a8256a2e38bb60610e72297e2ec70ce47d8d2552
    limits:
      cpu: 200m
      memory: 100Mi
    requests:
      cpu: 200m
      memory: 100Mi
    readinessProbe: {}
    livenessProbe: {}
    services:
      # default values (type: ClusterIP, protocol: TCP, targetPort = Port)
      - name: grpc
        port: 9001
    ingress:
      enabled: false

argocd:
  - name: pulsar-test
    namespace: pulsar-test
    repoUrl: https://github.com/apache/pulsar-helm-chart.git
    targetRevision: master
    path: charts/pulsar
    helm: 
      valueFiles:
        - values.yaml
      values: |
        namespace: pulsar
        namespaceCreate: true
        
        # Global nodeSelector for all components
        nodeSelector:
          role: pulsar

        # Zookeeper configuration
        zookeeper:
          nodeSelector:
            role: pulsar
          replicaCount: 3
          resources:
            requests:
              memory: "512Mi"
              cpu: "0.3"
            limits:
              memory: "1Gi"
              cpu: "1"

        # Bookkeeper configuration
        bookkeeper:
          nodeSelector:
            role: pulsar
          replicaCount: 3
          resources:
            requests:
              memory: "512Mi"
              cpu: "0.3"
            limits:
              memory: "1Gi"
              cpu: "1"

        # Broker configuration
        broker:
          nodeSelector:
            role: pulsar
          replicaCount: 3
          resources:
            requests:
              memory: "512Mi"
              cpu: "0.3"
            limits:
              memory: "1Gi"
              cpu: "1"

        # Proxy configuration
        proxy:
          nodeSelector:
            role: pulsar
          replicaCount: 3
          resources:
            requests:
              memory: "512Mi"
              cpu: "0.3"
            limits:
              memory: "1Gi"
              cpu: "1"

        # Function worker configuration
        functions:
          nodeSelector:
            role: pulsar
          resources:
            requests:
              memory: "512Mi"
              cpu: "0.3"
            limits:
              memory: "1Gi"
              cpu: "1"

        # Monitoring stack configuration
        kube-prometheus-stack:
          enabled: false
          prometheusOperator:
            nodeSelector:
              role: pulsar
          prometheus:
            enabled: false
          grafana:
            enabled: false # Disable Grafana
          alertmanager:
            enabled: false # Disable Alertmanager
          prometheus-node-exporter:
            enabled: false
          nodeExporter:
            enabled: false

        # Standalone node-exporter disabled
        prometheus-node-exporter:
          enabled: false

        # Additional components
        autorecovery:
          nodeSelector:
            role: pulsar
          resources:
            requests:
              memory: "256Mi"
              cpu: "0.1"
            limits:
              memory: "512Mi"
              cpu: "0.3"
        
        bastion:
          nodeSelector:
            role: pulsar
          resources:
            requests:
              memory: "256Mi"
              cpu: "0.1"
            limits:
              memory: "512Mi"
              cpu: "0.3"

        pulsar_manager:
          nodeSelector:
            role: pulsar
          resources:
            requests:
              memory: "256Mi"
              cpu: "0.1"
            limits:
              memory: "512Mi"
              cpu: "0.3"

# - name: apisix